{
  "resumeTitle": {
    "title": "소통을 중요시하는 프론트엔드 개발자 이도연입니다."
  },

  "information": {
    "name": "이도연",
    "address": "서울시 노원구",
    "birth": "1997. 10. 24",
    "contact": [
      {
        "id": 0,
        "name": "Email.",
        "href": "dlehdus1433@gmail.com",
        "isEmail": true
      },
      { "id": 1, "name": "Github.", "href": "https://github.com/leedo97y" },
      { "id": 2, "name": "Blog.", "href": "https://velog.io/@dlehdus97" }
    ]
  },

  "project": [
    {
      "id": 0,
      "name": "오늘 뭐 입지?",
      "description": "집을 나설때마다 애매한 날씨 때문에 입고 나갈 옷을 고민하는 사람들을 위해 기온별 옷차림을 알려주는 웹페이지를 만들었습니다.\n\nVanilla JS를 사용한 첫 프로젝트였으며, 팀원은 백엔드 1명, 프론트 4명으로 구성되어 있었고 Open Weather API를 사용하였습니다.\n팀원 모두가 개발이 처음이었으므로 언어를 다루는 데 미숙하여 배포를 하지 못했지만,\n프로젝트를 진행하며 협업이 진행되는 방식을 알 수 있었습니다.\n\n제가 맡은 부분은 전체 프로젝트 기획, 회원가입 폼과 로그인 폼 UI, 전체 페이지 UI 디자인 이었습니다.\n프로젝트 기획 당시, 해시태그를 통해 상세 옷차림을 알려주는 부분과 한 줄 참견 같은 사용자의 사용성을 높일 수 있는 다양한 아이디어를 냈으며 이 부분이 프로젝트에 반영되었습니다.\n\n프로젝트가 진행됨에 따라, 기온에 따른 옷차림을 보여주기 위해서 날씨에 따른 옷 아이콘을 어떤 방식으로 변화를 줄 수 있을지, 이야기 부분 구성 등에 대한 문제가 있었습니다.\n\n우선 날씨에 따른 옷차림을 보여주는 부분은 대표가 될만한 옷 아이콘 몇 개를 선정한 뒤,\n이를 Open Weather API의 날씨 코드를 사용하여 날씨 범위에 따라 다르게 나타내주는 방식으로 해결했습니다.\n\n이야기 부분은 로그인 후에 이용 가능한 사용자의 세부 지역 날씨에 대한 본인의 의견을 남기는 공간이며, 지역에 따른 Open Weather API로는 사용자의 상세한 지역까지는 알 수 없다는 문제가 있었습니다.\n이 문제는 추가적으로 본인의 세부 지역을 적는 칸을 만들어 세부 지역의 날씨도 알 수 있도록 하여 해결했으며,\n이를 해결함으로써 사용성을 높일 수 있었습니다.",
      "shortDesc": "기온별 옷차림 웹사이트 프로젝트\n\n- 로그인, 회원가입, 메인 페이지 마크업\n- 위치 기반 Open Weather API를 사용한 날씨 알림 기능\n- 페이지 전체 style 개선",
      "repoUrl": "https://github.com/leedo97y/backup_folder",
      "videoUrl": "https://cdn-api.elice.io/recruit-api-attachment/attachment/42f906a51bba4f29addc091f549feaab/weather.MP4",
      "isTeam": true,
      "percent": "15%",
      "teamInfo": "FE 4 BE 1",
      "period": ["2022. 02", "2022. 03"],
      "stack": [
        "HTML",
        "CSS",
        "JavaScript",
        "Git",
        "Github",
        "SourceTree",
        "Figma"
      ]
    },
    {
      "id": 1,
      "name": "계란후라이",
      "description": "농장주가 직접 농산물을 등록하여 플랫폼을 통해 소비자와 거래할 수 있는 계란후라이라는 농산물 쇼핑몰을 만들었습니다.\nVanilla JS로 진행한 프로젝트였으며, 백엔드 2명, 프론트 3명으로 구성되어 있었습니다.\n\n제가 맡은 부분은 마이페이지, 과거 주문내역, 주문별 상세 내역, 관리자 관리 페이지, 에러 페이지, 푸터 컴포넌트입니다.\n\n마이페이지는 Session Storage에 저장된 jwt 토큰을 받아와서 로그인 한 사용자가 자신의 정보를 수정하거나 탈퇴 할 수 있도록 하였고, 주문한 내역 또한 볼 수 있도록 하였습니다.\n또, 사용성을 높이기 위해 정보 수정 기능에 Daum 주소 API를 사용하여 사용자가 자신의 주소를 입력하기 쉽게 만들었습니다.\n\n과거 주문 내역 페이지에서는 사용자가 자신이 주문했던 내역을 주문서 이름으로 확인 할 수 있도록 하였고,\n이에 대한 상세 내역은 주문별 상세 내역 페이지에서 볼 수 있도록 하였습니다.\n\n관리자 관리 페이지는 관리자가 제품 관리, 카테고리 관리, 주문 관리를 할 수 있는 페이지의 도입 페이지로 관리자가 사용하는 페이지를 모아놓아 사용성을 높였습니다.\n\n푸터는 거의 모든 페이지에 반복되는 부분이며 어떻게 넣어야 효율적일지 가장 고민했던 부분이었으며,\nejs를 사용하여 푸터 HTML을 컴포넌트화 하여 각 페이지에 넣어 주었습니다.\n결과적으로 코드의 재사용성을 높일 수 있었으며 코드가 간결해져 효율적인 관리를 할 수 있었습니다.\n또, 서버의 데이터를 받아와서 HTML 내에서 바로 사용 수 있다는 장점도 있었습니다.\n일정 관리는 Trello를 사용하였으며, 사용법이 간단하고 가시적으로 프로젝트 진행도가 보여 기한에 맞춘 프로젝트의 전반적인 관리를 효율적으로 할 수 있었다는 장점이 있었습니다.",
      "shortDesc": "엘리스 SW 트랙 3기에서 진행한 농산물 거래 쇼핑몰 프로젝트\n\n- jwt를 사용한 로그인\n- fetch 함수의 POST 메서드를 사용한 로그인 정보 수정 페이지\n- Trello를 통한 프로젝트 일정 관리\n- Bulma, CSS를 통한 스타일링",
      "repoUrl": "https://github.com/leedo97y/vegetable",
      "videoUrl": "https://drive.google.com/file/d/1I3fyRzdBMLiX_vOxWasrhFlgjrB7dRbr/view?usp=share_link",
      "isTeam": true,
      "percent": "30%",
      "teamInfo": "FE 3 BE 2",
      "period": ["2022. 09", "2022. 10"],
      "stack": [
        "HTML",
        "CSS",
        "JavaScript",
        "EJS",
        "Bulma",
        "Git",
        "Gitlab",
        "Trello",
        "Figma"
      ]
    },
    {
      "id": 2,
      "name": "Retfilx",
      "description": "React로 Netfilx의 UI를 만들어보며 React 스터디를 진행했습니다.\n\nFigma로 페이지를 디자인 한 뒤 각자 한 페이지나 부분적인 컴포넌트를 맡았으며, 제가 맡은 부분은 메인 페이지의 헤더와 푸터 컴포넌트, 프로필 이전 페이지였습니다.\n\n5명 모두 프론트였기 때문에 데이터를 다루는 작업에 한계가 있었고,\n평소에 관심이 있었던 넷플릭스를 선택하여 간단한 페이지 UI 구성과 디자인을 경험해보기로 했습니다.\n\n개발하며 생겼던 고민사항으로는 메인 페이지에 자동으로 재생되는 영상을 어떻게 넣을지와 영화 정보를 어디서 가져올 것인지, 로그인 여부에 따른 라우팅 설정 방법 등이 있었습니다.\n\n메인 페이지를 구성할 당시, 백엔드를 담당하는 사람이 없어 영상 데이터를 받아와서 다룰 수 없다는 문제가 있었습니다.\n따라서 React-player라는 라이브러리를 사용하여 유투브 링크를 넣어 영상을 재생가능하게 해주는 방법을 사용하여 이 문제를 해결했습니다.\n\n영화 정보 역시 백엔드가 없어 데이터를 받아와서 사용할 수 없는 문제가 있었기 때문에 Open Movie API 중 Netfilx의 영화 정보를 제공해주는 API를 사용했습니다.\n\n로그인 여부에 따라 라우팅을 다르게 보여주고자 로그인 시에 Math 객체의 random 메서드를 사용하여 간이 토큰을 발행해 부여해주었으며,\n토큰의 유무에 따라 토큰이 없을 경우 인트로 페이지를 첫 페이지로 라우팅 해주고, 토큰이 있을 경우 메인페이지가 첫 페이지가 되도록 라우팅해 주도록 설정했습니다.\n그러나 토큰 값이 변수에 저장된 상태로 reloading이 되지 않아서 문제가 발생했으며, 추후에 로그인 페이지에서 로그인 완료 후 첫 페이지로 navigate를 해주는 코드 뒤에 reloading을 해주는 코드를 추가하여 문제를 해결할 수 있었습니다.\n\n아이콘은 React-icons 패키지를 사용해 import하여 구현하였는데, 아이콘을 컴포넌트처럼 삽입하여 편리하게 사용할 수 있다는 장점이 있었습니다.\n또, 스타일 코드에서 svg로 아이콘의 스타일을 일괄 조정해줄 수 있어 간편하다는 장점이 있었습니다.",
      "shortDesc": "React 스터디에서 진행한 넷플릭스 UI 클론 프로젝트\n\n- CSS hover, active 속성을 활용한 header의 드롭다운 프로필\n- JIRA를 통한 프로젝트 일정 관리\n- grid, flex를 혼합하여 사용, UI 구현\n- Vercel을 통한 배포\n- Emotion, React-icon을 사용하여 스타일링",
      "webUrl": "https://retflix.vercel.app/",
      "repoUrl": "https://github.com/leedo97y/Retflix",
      "isTeam": true,
      "percent": "30%",
      "teamInfo": "FE 5",
      "period": ["2022. 10", "2022. 11"],
      "stack": [
        "React",
        "Emotion",
        "React-icons",
        "Vercel",
        "Git",
        "Github",
        "Figma",
        "Jira"
      ]
    },
    {
      "id": 3,
      "name": "TripMatch - 여행 동행자 매칭 서비스",
      "description": "혼자 국내 여행하는 사람들을 위한 서비스인 여행 동행자 매칭 서비스 TripMatch를 만들었습니다.\n\n타입 안정성을 위해 TypeScript와 React를 사용하였으며, tsx를 사용하며 React에서의 이벤트 타입과 Props 타입을 설정해주는 방법을 익힐 수 있었습니다.\n또, 프로젝트를 통한 다양한 경험과 빠른 패키지 설치를 위해 npm 대신 yarn이라는 패키지 관리 툴을 사용하였습니다.\n\n기획 시, 체계적으로 각 페이지에 필요한 사항들을 Figma, Figjam을 사용하여 정리하고 구성하였으며,\n이 중 나의 게시글 내역, 나의 댓글 내역, 신청 받은 내역, 신청한 내역과 동행 신청 취소, 리뷰 기능을 담당했습니다.\n\n팀원이 프론트엔드 5명, 백엔드 1명으로 구성되어 화면 구성 속도에 비해 서버 구성 속도가 느렸으므로 기획 시 프론트엔드 팀원들이 Figma의 ERD 테이블 기능을 사용하여 각자 페이지에 필요한 데이터를 미리 적어주어 백엔드가 1명인 부담을 덜 수 있었습니다.\n\n타인과의 동행을 해야하는 서비스이기 때문에 어떻게 해야 서비스 이용자들 간의 신뢰를 높일 수 있을지가 문제였으며,\n\n이에 대한 해결 방안으로 별점 리뷰 기능을 통해 동행 신청자가 상대방을 신뢰할 수 있도록 만들어주었으며, 사용자에게 통일감과 편리함을 주기 위해 리뷰 모달의 border나 프로필 이미지 위치, 창의 크기 등의 디자인을 수정해주었습니다.\n\n이러한 별점 리뷰 기능은 별점을 입력하고 확인 버튼을 누를때 5점 만점 기준으로 점수가 데이터의 matchPoint에 저장되는 방식을 사용했으며, 보낸 점수는 상대방의 정보에서 환산된 평균 점수로 확인할 수 있습니다.\n\n또, 마이 페이지 헤더 부분에서는 이러한 방식으로 타인이 평가한 자신의 점수를 볼 수 있도록 하였습니다.\n\n신청한 내역에서는 Date 객체와 getTime 메소드를 활용하여 7일간만 리뷰 버튼이 보이도록 설정했으며, 같은 방식으로 사용자의 편리함을 위해 리뷰 버튼 밑에 여행이 끝난후 몇 일이 지났는지 알려주는 문구를 띄워주도록 하였습니다.\n\n신청한 내역을 개발하며 연락을 위한 개인정보를 상대방에게 어떻게 전달할 것인지에 대한 문제가 있었으며,\n범죄 예방 차원에서 신청 status가 수락일 경우에 한해 상대방의 연락 정보가 나타나도록 하였습니다.\n이러한 연락 정보는 사용자의 자율성을 위해 SNS 아이디, 핸드폰 번호 등 다양한 연락 수단을 적을 수 있도록 설정했습니다.",
      "shortDesc": "\n\n엘리스 SW 트랙 3기에서 진행한 여행 동행 매칭 서비스 프로젝트\n\n- Figma을 사용하여 사용자 관련 페이지 기획\n- Typescript를 사용하여 타입 안정성을 높임.\n- globalStyle 적용, Theme color를 정해 코드에 적용\n- 인증정보를 담은 authAxios 사용\n- Date 객체를 통한 리뷰 페이지 UI 개선\n- Cloudtype.io를 통한 배포",
      "webUrl": "https://web-trip-match-1b5xkk2fldeum3x7.gksl2.cloudtype.app/",
      "repoUrl": "https://github.com/leedo97y/TripMatch",
      "videoUrl": "https://drive.google.com/file/d/1pUVAXMA1YtMgFE6_HKV3qnQrUT_zsGUm/view?usp=share_link",
      "figmaUrl": "https://www.figma.com/file/4bLsUoLZ1HW0FUGzgelvmP/figma-flowchart?node-id=0%3A1",
      "isTeam": true,
      "percent": "30%",
      "teamInfo": "FE 5 BE 1",
      "period": ["2022. 12", "2023. 01"],
      "stack": [
        "React",
        "TypeScript",
        "Styled-Components",
        "Sass",
        "Redux",
        "Cloudtype.io",
        "Git",
        "Gitlab",
        "Figma",
        "Figjam"
      ]
    },
    {
      "id": 4,
      "name": "Tomuto ( Tomato-Music )",
      "description": "멜론이라는 스트리밍 사이트를 참고하여 Tomuto라는 사이트를 구현하였으며, vanillaJS를 사용했습니다.\n\n프로젝트를 진행하며 반복되는 코드가 많아졌기 때문에 코드를 간단히 하기 위해 Pug를 사용했습니다.\n\n또, Webpack을 사용하여 js, css, img, audio 파일 등을 번들링하여 네트워크의 요청을 최소화하여 성능 최적화를 하였으며, 코드 스플리팅을 진행하여 필요한 번들만 로딩할 수 있도록 해주어 초기 로딩시간을 줄여주었습니다.\n\n배포는 fly.io라는 사이트에서 진행하였고, 사이트에 나와있는 코드를 참고하여 CLI를 통해 진행하였습니다.\n\nTomuto를 개발하며 프로젝트 기획부터 프론트엔드 개발, 백엔드 개발, 배포 등을 전부 경험해보며, 프로젝트 코드가 어떻게 진행되는지, 데이터를 어떻게 다루어야하는지 등을 알게 되었습니다.\n\nTomuto는 메인페이지, 로그인 페이지, 플레이리스트 페이지, pop star 페이지, k-pop 페이지, top tracks 페이지로 구성되어 있습니다.\n\n메인페이지에서는 last.fm API를 사용하여 구현한 pop top 50 인기 차트를 볼 수 있으며, 저장된 오디오 파일을 사용하여 미니 플레이리스트를 재생할 수 있습니다.\n이메일과 비밀번호, 닉네임을 사용하여 회원가입을 할 수 있으며, 로그인 페이지에서 가입시 사용한 이메일과 비밀번호를 통해 로그인이 가능합니다.\n로그인이 완료되면 헤더에 있는 닉네임이 guest에서 회원가입 시 작성했던 닉네임으로 변하며, myplaylist로 들어갈 수 있는 버튼이 나타납니다.\n\nmy playlist 페이지에서는 저장된 오디오 파일을 사용하여, 플레이리스트에 음악 추가 및 삭제가 가능합니다.\npop star 페이지에서는 last.fm API를 사용하여 구현한 3위까지의 pop star 순위를 볼 수 있으며, 1위에 해당하는 pop star의 소개를 볼 수 있습니다.\nk-pop 페이지에서는 last.fm API를 사용하여 구현한 k-pop top 50 앨범 차트를 볼 수 있으며, 1위에 해당하는 k-pop 아티스트의 소개글을 볼 수 있습니다.\n\ntop tracks 페이지에서는 위치를 기반으로 한 last.fm API를 사용하여 각 나라의 인기 차트를 5위까지 볼 수 있습니다.\n차트는 카드 형식에 animation을 사용하여 hover 시 돌아가며 나타나도록 하였으며, 나라마다 특성이 담긴 이미지로 배경을 지정하고, gray filter를 사용하여 UI 상의 통일감을 주었습니다.",
      "shortDesc": "melon 사이트를 참고하여 개발한 뮤직 플레이어 사이트 프로젝트\n\n- localStorage를 활용한 사용자 개인 플레이리스트 개발\n- last.fm API를 통해 아티스트 설명 페이지 개발\n- fly.io를 통한 배포\n- Styled-component를 사용하여 스타일링\n- Pug를 통한 손쉽고 간단한 마크업\n- Webpack을 통한 image, audio 파일 번들링을 통해 성능 최적화",
      "webUrl": "https://tomato-music.fly.dev/",
      "repoUrl": "https://github.com/leedo97y/melon-clone",
      "isTeam": false,
      "percent": "100%",
      "teamInfo": "FE 1",
      "period": ["2023. 03", "2023. 04"],
      "stack": [
        "JavaScript",
        "Scss",
        "Webpack",
        "Pug",
        "Git",
        "Github",
        "Fly.io"
      ]
    }
  ],

  "certificate": [
    {
      "id": 0,
      "name": "프로젝트 최우수상 수상",
      "description": "17팀 중 2등",
      "date": "2022. 12. 30",
      "organizer": "(주)엘리스그룹"
    }
  ]
}
